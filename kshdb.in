#!@SH_PROG@
# -*- shell-script -*-
# kshdb - top-level debugger program.
#
#   Copyright (C) 2008 Rocky Bernstein rocky@gnu.org
#
#   kshdb is free software; you can redistribute it and/or modify it under
#   the terms of the GNU General Public License as published by the Free
#   Software Foundation; either version 2, or (at your option) any later
#   version.
#
#   kshdb is distributed in the hope that it will be useful, but WITHOUT ANY
#   WARRANTY; without even the implied warranty of MERCHANTABILITY or
#   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#   for more details.
#   
#   You should have received a copy of the GNU General Public License along
#   with kshdb; see the file COPYING.  If not, write to the Free Software
#   Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.

# Are we using a debugger-enabled ksh? If not let's stop right here.
if [[ -z "$.sh.level}" ]] ; then 
  echo "Sorry, your ksh just isn't modern enough." 2>&1
  exit 2
fi

# This routine gets called via the -c or --command option and its sole
# purpose is to capture the command string such as via "x $*" or 
# in a traceback ("where").
function _Dbg_eval {
  eval $*  # Type: "x $*" to see what's being run.
}

typeset -a _Dbg_script_args=("$@")

# Original $0. Note we can't set this in an include.
typeset -r _Dbg_orig_0=$0

# Equivalent to basename $0; the short program name
typeset _Dbg_pname=${0##*/}  

typeset prefix=@prefix@
typeset _Dbg_libdir=@PKGDATADIR@

# Parse just the libdir option
typeset -i i
for ((i=0; $i<${#_Dbg_script_args[@]}-1; i++)) ; do 
    typeset arg=${_Dbg_script_args[$i]}
    if [[ $arg == '-L' || $arg == '--libdir' ]] ; then
	((i++))
	_Dbg_libdir="${_Dbg_script_args[$i]}"
	break
    fi
done
if [[ ! -d $_Dbg_libdir ]] && [[ ! -d $_Dbg_libdir ]] ; then 
  echo "${_Dbg_pname}: Can't read debugger library directory '${_Dbg_libdir}'."
  echo "${_Dbg_pname}: Perhaps kshdb is installed wrong (if its installed)." >&2
  echo "${_Dbg_pname}: Try running kshdb using -L (with a different directory)." >&2
  echo "${_Dbg_pname}: Run kshdb --help for a list and explanation of options." >&2
  exit 1
fi

. $_Dbg_libdir/dbg-opts.sh

# [[ $# == 0 && -z $show_version && -z $_Dbg_cmd ]] && {
#   echo "${_Dbg_pname}: Need to give a script name to debug."
#   exit 1
# }

if [[ ! -d $_Dbg_tmpdir ]] && [[ ! -w $_Dbg_tmpdir ]] ; then
  echo "${_Dbg_pname}: cannot write to temp directory $_Dbg_tmpdir." >&2
  echo "${_Dbg_pname}: Use -T try directory location." >&2
  exit 1
fi

[[ -r $_Dbg_libdir/$_Dbg_main ]] || {
  echo "${_Dbg_pname}: cannot read debugger file $_Dbg_libdir/$_Dbg_main." >&2
  echo "${_Dbg_pname}: Perhaps bashdb is installed incorrectly." >&2
  exit 1
}

. ${_Dbg_libdir}/dbg-main.sh

# Note that this is called via kshdb rather than "ksh --debugger" or kshdb-trace
_Dbg_script=1

# TEMPORARY: Save me typing in testing.
if (( ${#_Dbg_script_args[@]} > 0 )) ; then
    _Dbg_script_file="$_Dbg_script_args[1]"
else
    _Dbg_script_file=./testing.sh
    # _Dbg_script_file=./file2.sh
    _Dbg_script_args=($_Dbg_script_file)
fi

typeset -i o_no_quit=0 # FIXME: Set in dbg-opts.sh

_Dbg_step_ignore=2
while : ; do
    trap '_Dbg_debug_trap_handler "$@"' DEBUG
    . ${_Dbg_script_args[@]}
    trap '' DEBUG
    _Dbg_msg_nocr 'Program terminated.'
    if (( !o_no_quit )); then
	_Dbg_msg "Type 's' to restart."
	_Dbg_process_commands
	_Dbg_step_ignore=2
	# _Dbg_msg "Type 's' or 'R' to restart."
    else
	_Dbg_msg ''
	break
    fi
done

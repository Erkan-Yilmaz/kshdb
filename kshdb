#!/usr/bin/ksh
# -*- shell-script -*-
#   Copyright (C) 2008 Rocky Bernstein rocky@gnu.org
#
#   kshdb is free software; you can redistribute it and/or modify it under
#   the terms of the GNU General Public License as published by the Free
#   Software Foundation; either version 2, or (at your option) any later
#   version.
#
#   kshdb is distributed in the hope that it will be useful, but WITHOUT ANY
#   WARRANTY; without even the implied warranty of MERCHANTABILITY or
#   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#   for more details.
#   
#   You should have received a copy of the GNU General Public License along
#   with Bash; see the file COPYING.  If not, write to the Free Software
#   Foundation, 59 Temple Place, Suite 330, Boston, MA 02111 USA.
#

[[ -z $_Dbg_ver ]] && typeset -r _Dbg_ver=\
'$Id: ksh,v 0.0$'

function _Dbg_usage_long {
  printf "usage:
    ${_Dbg_pname} [OPTIONS] <script_file>

Runs script_file under a debugger.
" 1>&2
}

function _Dbg_usage_short {
  printf "usage:
    ${_Dbg_pname} [OPTIONS] <script_file>
"
}

# This routine gets called via the -c or --command option and its sole
# purpose is to capture the command string such as via "x $*" or 
# in a traceback ("where").
function kshdb_eval {
  eval "$@"  # Type: "x $*" to see what's being run.
}

typeset -a _Dbg_script_args="$@"

# Equivalent to basename $0; the short program name
typeset _Dbg_pname=${0##*/}  

typeset    _Dbg_main=dbg-main.inc
prefix=/usr/local  # cygwin gets PKGDATADIR wrong
typeset    _Dbg_libdir=${prefix}/share/kshdb
typeset    _Dbg_bindir=$(dirname $0)
typeset    _Dbg_tmpdir=/tmp
typeset -i _Dbg_opt_linetrace=0
typeset    _Dbg_cmd='' # If command string given on command line, this is it.

# Use gdb-style annotate?
typeset -i _Dbg_annotate=0

# What to set for location of helper routines? 
if [[ ! -e $_Dbg_libdir/$_Dbg_main ]] ; then
  # Use bindir/../share as fallback
    _Dbg_libdir=
    if [[ -d $_Dbg_bindir/../share/kshdb ]] ; then
      _Dbg_libdir=$_Dbg_bindir/../share/kshdb
    fi
fi

TEMP=`getopt -o A:Bc:hL:nqt:T::x:XYV \
    --long annotate:,basename,command:,debugger,exec-command,help,library:,no-init,quiet,tempdir:,terminal:,trace,tty,version \
     -n 'kshdb' -- "$@"`

if [ $? != 0 ] ; then 
    echo "Use --help for option help. Terminating..." >&2 ; 
    exit 1 ; 
fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
    case $1 in
	-A|--annotate) _Dbg_annotate="$2"; shift ;;
	-B|--basename) _Dbg_basename_only=1 ;;
	-c|--eval-command) _Dbg_cmd="$2"; shift ;;
	--debugger) ;;  # This option is for compatibility with bash --debugger
	-h|--help) _Dbg_usage_long; exit 100 ;;
	-L|--library) _Dbg_libdir=$2; shift ;;
	-n|--nx|--no-init) _Dbg_no_init=1 ;;
	-q|--quiet) _Dbg_quiet=1 ;;
	-T|--tempdir) _Dbg_tmpdir=$2; shift ;;
	-t|--terminal|--tty) 
	    if ! $(touch $2 >/dev/null 2>/dev/null); then 
		echo "${_Dbg_pname}: Can't access $2 for writing."
	    elif [[ ! -w $2 ]] ; then
		echo "${_Dbg_pname}: terminal $2 needs to be writable."
	    else
		_Dbg_tty=$2 ;
	    fi
	    shift
	    ;;
	-x|--command) KSHDB_INPUT="$KSHDB_INPUT $2"; shift ;;  
	-X|--trace) _Dbg_opt_linetrace=1 ;;  
	# -Y|--vtrace) _Dbg_opt_linetrace=1 ; _Dbg_opt_linetrace_expand=1 ;;  
	-V|--version) show_version=1 ;;
	--) shift ; break ;;
	*) 
	    echo "Use --help for option help. Terminating..."
	    exit 2 ;;
    esac
    shift
done

[[ $# == 0 && -z $show_version && -z $_Dbg_cmd ]] && {
  echo "${_Dbg_pname}: Need to give a script name to debug."
  exit 1
}

if [[ ! -d $_Dbg_libdir ]] && [[ ! -d $_Dbg_libdir ]] ; then 
  echo "${_Dbg_pname}: Can't read debugger library directory '${_Dbg_libdir}'."
  echo "${_Dbg_pname}: Perhaps kshdb is installed wrong (if its installed)." >&2
  echo "${_Dbg_pname}: Try running kshdb using -L (with a different directory)." >&2
  echo "${_Dbg_pname}: Run kshdb --help for a list and explanation of options." >&2
  exit 1
fi

_source_file=$1
shift

if [[ ! -d $_Dbg_tmpdir ]] && [[ ! -w $_Dbg_tmpdir ]] ; then
  echo "${_Dbg_pname}: cannot write to temp directory $_Dbg_tmpdir." >&2
  echo "${_Dbg_pname}: Use -T try directory location." >&2
  exit 1
fi

[[ -r $_Dbg_libdir/$_Dbg_main ]] || {
  echo "${_Dbg_pname}: cannot read debugger file $_Dbg_libdir/$_Dbg_main." >&2
  echo "${_Dbg_pname}: Perhaps kshdb is installed incorrectly." >&2
  exit 1
}

# Note that this is called via kshdb
_Dbg_script=1

. ${_Dbg_libdir}/dbg-pre.inc

if [[ -z $_Dbg_quiet ]] ; then 
  echo "Korn Shell 93 Debugger, release $_Dbg_release"
  printf '
Copyright 2008 Rocky Bernstein
This is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.

'
fi

if (( show_version == 1 )) ; then 
print '
There is absolutely no warranty for kshdb.  Type "show warranty" for details.
'
  exit 1
fi

if [[ ! -r "$_source_file" ]] && [[ -z $_Dbg_cmd ]] ; then
  echo "${_Dbg_pname}: cannot read program to debug: $_source_file." >&2
  exit 1
else
  typeset -r _Dbg_source_file=$(_Dbg_expand_filename $_source_file)
fi

. $_Dbg_libdir/dbg-main.inc
if (( $_Dbg_opt_linetrace )) ; then 
  # No stepping.
  _Dbg_write_journal_eval "_Dbg_steps=-1" 
  KSHDB_QUIT_ON_QUIT=1
else 
  # Set to skip over the next 4 statements
  ## _Dbg_write_journal_eval "_Dbg_steps=5" 
  :
fi

if [[ -z $_Dbg_cmd ]] ; then 
  if (( $_Dbg_opt_linetrace )) ; then 
    (( _Dbg_opt_linetrace_expand )) && _Dbg_linetrace_expand=1
    _Dbg_linetrace=1
  fi
  trap '_Dbg_debug_trap_handler' DEBUG
  . $_source_file
else 
  kshdb_eval "$_Dbg_cmd"
fi

#!@SH_PROG@
# -*- shell-script -*-
PS4='(${.sh.file}:${LINENO}): ${.sh.fun} - [${.sh.subshell}] 
'

this_script=$0
# Test _Dbg_get_source_line
test_get_source_line()
{
    typeset source_line
    _Dbg_get_source_line 2 $this_script
    assertEquals '# -*- shell-script -*-' "$source_line"
}

# Test readin and maxline
test_readin_maxline()
{
    typeset filename
    shu=$(_Dbg_resolve_expand_filename $shunit_file)
    _Dbg_readin ${shu}
    assertEquals "Read ${shu} status test" '0' $?
    typeset file2
    file2=$(_Dbg_is_file ${shu})
    assertEquals "Cached read of ${shu} test" '0' $?
    assertNotEquals "Getting cached file name back" '' "$file2"
    typeset -i maxline
    maxline=$(_Dbg_get_maxline $file2)
    assertEquals "Line-count of $file exit status" '0' $?
    # We'll assume shunit2 isn't going to get smaller ;-)
    assertEquals "Number of lines in $file2" 1 $(( maxline > 1000 ))
}


# Make sure @top_builddir@ has a trailing slash
if [ '@abs_top_srcdir@' = '' ] ; then
  echo "Something is wrong abs_top_srcdir is not set."
 exit 1
fi

abs_top_srcdir=@abs_top_srcdir@
abs_top_srcdir=${abs_top_srcdir%%/}/

_Dbg_libdir=$abs_top_srcdir
set -- -q  # Don't need to show banner
. $abs_top_srcdir/dbg-pre.sh
. $abs_top_srcdir/lib/filecache.sh
. $abs_top_srcdir/lib/file.sh

# load shunit2
shunit_file=${abs_top_srcdir}test/unit/shunit2
. ${shunit_file}


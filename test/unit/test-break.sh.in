#!@SH_PROG@
# -*- shell-script -*-
PS4='(${.sh.file}:${LINENO}): ${.sh.fun} - [${.sh.subshell}] 
'

# Test breakpoint set, unset, enable, disable, clear
test_breakpoint()
{
    # Some mock functions
    _Dbg_errmsg() {
	errmsgs+=("$@")
    }
    _Dbg_msg() {
	msgs+=("$@")
    }
    _Dbg_adjust_filename() {
	print -- $*
    }
    _Dbg_expand_filename() {
	print -- $*
    }

    typeset -a msgs
    msgs=()

    # Test parameter count checking for _Dbg_set_brkpt
    _Dbg_set_brkpt 
    assertNotEquals '_Dbg_set_brkpt no parms - should be bad' '0' "$?"
    _Dbg_set_brkpt 1 2 3 4 5
    assertNotEquals '_Dbg_set_brkpt parms - should be good' '0' "$?"

    assertEquals '$_Dbg_brkpt_count should be 0' 0 $_Dbg_brkpt_count

    # This should work
    _Dbg_set_brkpt test.sh 5 0
    assertEquals 'Breakpoint 1 set in file test.sh, line 5.' "${msgs[-1]}" 
    assertEquals '$_Dbg_brkpt_count should be 1' 1 $_Dbg_brkpt_count
    msgs=()

    # Test parameter count checking for _Dbg_unset_brkpt
    _Dbg_unset_brkpt
    assertEquals '0' "$?"
    _Dbg_unset_brkpt 1 2 3
    assertEquals '0' "$?"
    # Shouldn't find this breakpoint
    _Dbg_unset_brkpt test.sh 6
    assertEquals '0' "$?"
    assertEquals 'No breakpoint found at test.sh:6' "${msgs[-1]}" 

    assertEquals 1 $_Dbg_brkpt_count
    # msgs=()             # ksh bug? 
    typeset -a msgs=()    # without the typeset, msgs changes to -C below
    # This should work and remove a breakpoint
    _Dbg_unset_brkpt test.sh 5
    assertEquals '1' "$?"
    # typeset -p msgs -- no name
    # assertEquals '0' "${#msgs[@]}"
    # typeset -p msgs  Changes to -C
    assertEquals 0 $_Dbg_brkpt_count

    # This should not work since breakpoint has already been removed.
    typeset -a msgs=()    # without the typeset, msgs changes to -C below
    _Dbg_unset_brkpt test.sh 5
    assertEquals '0' "$?"
    # assertEquals 'No breakpoint found at test.sh:5' "${msgs[-1]}"

    msgs=(); errmsgs=()
    # Enable/disable parameter checking
    _Dbg_enable_disable_brkpt
    assertEquals '1' "$?"

    # Enable a non-existent breakpoint
    msgs=()
    _Dbg_enable_disable_brkpt 1 'enabled' 1
    assertEquals "Breakpoint entry 1 doesn't exist, so nothing done." "${errmsgs[-1]}" 

    msgs=(); errmsgs=()
    # Add another breakpoint for testing
    _Dbg_set_brkpt test.sh 6 1
    assertEquals 'One-time breakpoint 2 set in file test.sh, line 6.' "${msgs[-1]}" 
    assertEquals 1 $_Dbg_brkpt_count

    msgs=(); errmsgs=()
    _Dbg_enable_disable_brkpt 1 'enabled' 2
    assertEquals 'Breakpoint entry 2 already enabled, so nothing done.' "${errmsgs[-1]}" 

    msgs=(); errmsgs=()
    _Dbg_enable_disable_brkpt 0 'enabled' 2
    assertEquals 'Breakpoint entry 2 enabled.' "${msgs[-1]}" 

    msgs=(); errmsgs=()
    _Dbg_enable_disable_brkpt 1 'disabled' 2
    assertEquals '0' "$?"
    assertEquals 'Breakpoint entry 2 disabled.' "${msgs[-1]}" 

    assertEquals 1 $_Dbg_brkpt_count
    _Dbg_clear_all_brkpt
    assertEquals 0 $_Dbg_brkpt_count
}

# Make sure @top_builddir@ has a trailing slash
if [ '@abs_top_srcdir@' = '' ] ; then
  echo "Something is wrong abs_top_srcdir is not set."
 exit 1
fi

abs_top_srcdir=@abs_top_srcdir@
abs_top_srcdir=${abs_top_srcdir%%/}/

_Dbg_libdir=$abs_top_srcdir
set -- '-q'  # Don't need to show banner
. $abs_top_srcdir/dbg-pre.sh
. $abs_top_srcdir/lib/fns.sh
. $abs_top_srcdir/lib/journal.sh
. $abs_top_srcdir/lib/break.sh

srcdir=.
srcdir=${srcdir%%/}/

# load shunit2
shunit_file=${abs_top_srcdir}test/unit/shunit2
. ${shunit_file}


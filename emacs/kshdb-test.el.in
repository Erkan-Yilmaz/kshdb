; -*- emacs-lisp -*-
(load-file "@srcdir@/elk-test.el")
(load-file "@srcdir@/zshdb.el")

(deftest "zshdb-marker-filter-test"
  (assert-equal "Testing 1 2 3" (gud-zshdb-marker-filter "Testing 1 2 3"))
  (assert-equal "ABC" (gud-zshdb-marker-filter 
"breakpoints
No breakpoints

ABC")))

(defun regexp-stack-test (location-str pos-str file-str line-str)
  "Test to see that location-str matches gud-rdebug-marker-regexp"
  (assert-equal 0 (string-match zshdb--stack-frame-regexp location-str))
  (assert-equal pos-str
		(substring location-str (match-beginning 2)  (match-end 2)))
  (assert-equal file-str
		(substring location-str (match-beginning 4)  (match-end 4)))
  (assert-equal line-str
		(substring location-str (match-beginning 5)  (match-end 5)))
)
(deftest "zshdb-regexp-stack-test"

  (regexp-stack-test 
   "->1 source(\"/usr/local/bin/zshdb\") called from file `./zshdb' at line 280"
   "1" "./zshdb" "280"
   )
  (regexp-stack-test 
   "##0 in file `/usr/local/bin/zshdb' at line 27"
   "0" "/usr/local/bin/zshdb" "27"
   )
)

(defun regexp-breakpoint-test (location-str)
  "Test to see that location-str matches zshdb--breakpoint-regexp"
  (assert-equal 0 (string-match zshdb--breakpoint-regexp location-str))
)
(defun regexp-file-test (location-str file-str)
  "Test to see that location-str matches gud-zshdb-marker-regexp"
  (assert-equal 0 (string-match gud-zshdb-marker-regexp location-str))
  (assert-equal file-str
		(substring location-str
			   (match-beginning gud-zshdb-marker-regexp-file-group) 
			   (match-end gud-zshdb-marker-regexp-file-group)))
)
(deftest "zshdb-marker-regexp-test"

  (regexp-breakpoint-test
   "1   breakpoint keep y   /usr/local/bin/zshdb:10")

  (regexp-stack-test
   "->0 in file `/tmp/hanoi.sh' at line 31"
   "0" "/tmp/hanoi.sh" "31")
  (regexp-stack-test 
   "##1 source(\"/test/hanoi.sh\") called from file `/usr/local/bin/zshdb' at line 280" 
   "1" "/usr/local/bin/zshdb" "280"
)
  (regexp-stack-test 
   "##2 main() called from file `/usr/local/bin/zshdb' at line 0"
   "2" "/usr/local/bin/zshdb" "0")

  (regexp-file-test 
   "(e:\\sources\\capfilterscanner\\capanalyzer.sh:3):
"
   "e:\\sources\\capfilterscanner\\capanalyzer.sh"
   )
  (regexp-file-test 
   "(e:\\Documents and Settings\\jsmith\\My Documents\\cpanalyzer test.sh:3):
"
   "e:\\Documents and Settings\\jsmith\\My Documents\\cpanalyzer test.sh"
   )  
  (regexp-file-test 
   "(/etc/init.d/network:39):
"
   "/etc/init.d/network"
   )
)

;;; (defun position-regexp-test (location-str file-str line-str)
;;;   "Test to see that location-str matches position-regexp-test with the correct
;;; file and line submatches."
;;;   (assert-equal 0 (string-match zshdb-position-re location-str))
;;;   (assert-equal file-str (match-string zshdb-marker-regexp-file-group
;;;                                        location-str))
;;;   (assert-equal line-str (match-string zshdb-marker-regexp-line-group
;;;                                        location-str))
;;;   )
;;; (deftest "zshdb-position-re-test"

;;;   (position-regexp-test 
;;;    "(e:\\sources\\capfilterscanner\\capanalyzer.py:3):
;;; "
;;;    "e:\\sources\\capfilterscanner\\capanalyzer.py" "3"
;;;    )
;;;   (position-regexp-test 
;;;    "(e:\\Documents and Settings\\jsmith\\My Documents\\cpanalyzer test.py:3):
;;; "
;;;    "e:\\Documents and Settings\\jsmith\\My Documents\\cpanalyzer test.py" "3"
;;;    )  
;;;   (position-regexp-test 
;;;    "(/etc/init.d/network:29):
;;; "
;;;    "/etc/init.d/network" "29"
;;;    )
;;; ) 
   
(deftest "zshdb-get-script-name-test"
  (assert-equal '("foo" nil) (zshdb-get-script-name '("foo")))
  (assert-equal '("foo" t) (zshdb-get-script-name '("-A" "1" "foo")))
  (assert-equal '("foo" nil) (zshdb-get-script-name '("zshdb" "-L" "." "foo")))
  (assert-equal '("foo" t) (zshdb-get-script-name 
		       '("--debugger zshdb" "--annotate" "1" "foo")))
  (assert-equal '("bar" t) (zshdb-get-script-name 
		       '("--debugger zshdb" "--annotate" "1" "bar" "foo")))
)

(build-suite "zshdb-suite" 
	     "zshdb-regexp-stack-test"
	     "zshdb-marker-regexp-test"
	     "zshdb-get-script-name-test"
	     "zshdb-marker-filter-test")

(run-elk-test "zshdb-suite" "Test Emacs routines to run the zsh debugger")
